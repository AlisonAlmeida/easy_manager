// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/company_model.dart';
import 'models/customer_model.dart';
import 'models/product_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2900324613353458353),
      name: 'CompanyModel',
      lastPropertyId: const IdUid(1, 6515085215665968209),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6515085215665968209),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'costumers', srcEntity: 'CustomerModel', srcField: ''),
        ModelBacklink(name: 'products', srcEntity: 'Product', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 3724661364271312780),
      name: 'CustomerModel',
      lastPropertyId: const IdUid(9, 6481658844250504681),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 618518267773695169),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2643728079121771193),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8225875551790968890),
            name: 'cpf',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9154378374120270675),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2883703553797511985),
            name: 'phoneNumber1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1131031808488983874),
            name: 'phoneNumber2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7636464957137760181),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4446009006854109512),
            name: 'observations',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6481658844250504681),
            name: 'dbModelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 3837024491013073644),
            relationTarget: 'CompanyModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4724080572996396165),
      name: 'Product',
      lastPropertyId: const IdUid(12, 5194393799315910983),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2366657580083728251),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2443184290920863378),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7920969372438584518),
            name: 'cod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3096602043368090748),
            name: 'productProviderDocument',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8943226927139563229),
            name: 'costValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 816972371483088797),
            name: 'saleValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1237694140961722442),
            name: 'brand',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5857001277010237823),
            name: 'categoryName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 495163170294020611),
            name: 'unitMeasurement',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4775057042693920361),
            name: 'minQuantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 896752969512077727),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5194393799315910983),
            name: 'dbModelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 3192283760878127987),
            relationTarget: 'CompanyModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 4724080572996396165),
      lastIndexId: const IdUid(2, 3192283760878127987),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CompanyModel: EntityDefinition<CompanyModel>(
        model: _entities[0],
        toOneRelations: (CompanyModel object) => [],
        toManyRelations: (CompanyModel object) => {
              RelInfo<CustomerModel>.toOneBacklink(9, object.id,
                      (CustomerModel srcObject) => srcObject.dbModel):
                  object.costumers,
              RelInfo<Product>.toOneBacklink(
                      12, object.id, (Product srcObject) => srcObject.dbModel):
                  object.products
            },
        getId: (CompanyModel object) => object.id,
        setId: (CompanyModel object, int id) {
          object.id = id;
        },
        objectToFB: (CompanyModel object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CompanyModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(
              object.costumers,
              store,
              RelInfo<CustomerModel>.toOneBacklink(
                  9, object.id, (CustomerModel srcObject) => srcObject.dbModel),
              store.box<CompanyModel>());
          InternalToManyAccess.setRelInfo(
              object.products,
              store,
              RelInfo<Product>.toOneBacklink(
                  12, object.id, (Product srcObject) => srcObject.dbModel),
              store.box<CompanyModel>());
          return object;
        }),
    CustomerModel: EntityDefinition<CustomerModel>(
        model: _entities[1],
        toOneRelations: (CustomerModel object) => [object.dbModel],
        toManyRelations: (CustomerModel object) => {},
        getId: (CustomerModel object) => object.id,
        setId: (CustomerModel object, int id) {
          object.id = id;
        },
        objectToFB: (CustomerModel object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final cpfOffset =
              object.cpf == null ? null : fbb.writeString(object.cpf!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final phoneNumber1Offset = object.phoneNumber1 == null
              ? null
              : fbb.writeString(object.phoneNumber1!);
          final phoneNumber2Offset = object.phoneNumber2 == null
              ? null
              : fbb.writeString(object.phoneNumber2!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final observationsOffset = object.observations == null
              ? null
              : fbb.writeString(object.observations!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, cpfOffset);
          fbb.addOffset(3, addressOffset);
          fbb.addOffset(4, phoneNumber1Offset);
          fbb.addOffset(5, phoneNumber2Offset);
          fbb.addOffset(6, emailOffset);
          fbb.addOffset(7, observationsOffset);
          fbb.addInt64(8, object.dbModel.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CustomerModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              cpf: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              phoneNumber1: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              phoneNumber2: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              observations: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18));
          object.dbModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.dbModel.attach(store);
          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[2],
        toOneRelations: (Product object) => [object.dbModel],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final codOffset = fbb.writeString(object.cod);
          final productProviderDocumentOffset =
              fbb.writeString(object.productProviderDocument);
          final brandOffset = fbb.writeString(object.brand);
          final categoryNameOffset = fbb.writeString(object.categoryName);
          final unitMeasurementOffset = fbb.writeString(object.unitMeasurement);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, codOffset);
          fbb.addOffset(3, productProviderDocumentOffset);
          fbb.addFloat64(4, object.costValue);
          fbb.addFloat64(5, object.saleValue);
          fbb.addOffset(6, brandOffset);
          fbb.addOffset(7, categoryNameOffset);
          fbb.addOffset(8, unitMeasurementOffset);
          fbb.addInt64(9, object.minQuantity);
          fbb.addOffset(10, descriptionOffset);
          fbb.addInt64(11, object.dbModel.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cod: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              productProviderDocument:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 10, ''),
              brand: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              categoryName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              unitMeasurement: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              costValue:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              saleValue:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              minQuantity: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              description: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''));
          object.dbModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.dbModel.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CompanyModel] entity fields to define ObjectBox queries.
class CompanyModel_ {
  /// see [CompanyModel.id]
  static final id =
      QueryIntegerProperty<CompanyModel>(_entities[0].properties[0]);
}

/// [CustomerModel] entity fields to define ObjectBox queries.
class CustomerModel_ {
  /// see [CustomerModel.id]
  static final id =
      QueryIntegerProperty<CustomerModel>(_entities[1].properties[0]);

  /// see [CustomerModel.name]
  static final name =
      QueryStringProperty<CustomerModel>(_entities[1].properties[1]);

  /// see [CustomerModel.cpf]
  static final cpf =
      QueryStringProperty<CustomerModel>(_entities[1].properties[2]);

  /// see [CustomerModel.address]
  static final address =
      QueryStringProperty<CustomerModel>(_entities[1].properties[3]);

  /// see [CustomerModel.phoneNumber1]
  static final phoneNumber1 =
      QueryStringProperty<CustomerModel>(_entities[1].properties[4]);

  /// see [CustomerModel.phoneNumber2]
  static final phoneNumber2 =
      QueryStringProperty<CustomerModel>(_entities[1].properties[5]);

  /// see [CustomerModel.email]
  static final email =
      QueryStringProperty<CustomerModel>(_entities[1].properties[6]);

  /// see [CustomerModel.observations]
  static final observations =
      QueryStringProperty<CustomerModel>(_entities[1].properties[7]);

  /// see [CustomerModel.dbModel]
  static final dbModel = QueryRelationToOne<CustomerModel, CompanyModel>(
      _entities[1].properties[8]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id = QueryIntegerProperty<Product>(_entities[2].properties[0]);

  /// see [Product.name]
  static final name = QueryStringProperty<Product>(_entities[2].properties[1]);

  /// see [Product.cod]
  static final cod = QueryStringProperty<Product>(_entities[2].properties[2]);

  /// see [Product.productProviderDocument]
  static final productProviderDocument =
      QueryStringProperty<Product>(_entities[2].properties[3]);

  /// see [Product.costValue]
  static final costValue =
      QueryDoubleProperty<Product>(_entities[2].properties[4]);

  /// see [Product.saleValue]
  static final saleValue =
      QueryDoubleProperty<Product>(_entities[2].properties[5]);

  /// see [Product.brand]
  static final brand = QueryStringProperty<Product>(_entities[2].properties[6]);

  /// see [Product.categoryName]
  static final categoryName =
      QueryStringProperty<Product>(_entities[2].properties[7]);

  /// see [Product.unitMeasurement]
  static final unitMeasurement =
      QueryStringProperty<Product>(_entities[2].properties[8]);

  /// see [Product.minQuantity]
  static final minQuantity =
      QueryIntegerProperty<Product>(_entities[2].properties[9]);

  /// see [Product.description]
  static final description =
      QueryStringProperty<Product>(_entities[2].properties[10]);

  /// see [Product.dbModel]
  static final dbModel =
      QueryRelationToOne<Product, CompanyModel>(_entities[2].properties[11]);
}
