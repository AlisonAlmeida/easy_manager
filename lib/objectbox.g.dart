// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/customer_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2365236464968801082),
      name: 'CustomerModel',
      lastPropertyId: const IdUid(8, 4600263567920326036),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7387693164290253068),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2334349908535080129),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4646916574366634094),
            name: 'cpf',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3133613020234451435),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1803342646050043060),
            name: 'phoneNumber1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2674788447419926116),
            name: 'phoneNumber2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4257358796482525620),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4600263567920326036),
            name: 'observations',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 2365236464968801082),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CustomerModel: EntityDefinition<CustomerModel>(
        model: _entities[0],
        toOneRelations: (CustomerModel object) => [],
        toManyRelations: (CustomerModel object) => {},
        getId: (CustomerModel object) => object.id,
        setId: (CustomerModel object, int id) {
          object.id = id;
        },
        objectToFB: (CustomerModel object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final cpfOffset =
              object.cpf == null ? null : fbb.writeString(object.cpf!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final phoneNumber1Offset = object.phoneNumber1 == null
              ? null
              : fbb.writeString(object.phoneNumber1!);
          final phoneNumber2Offset = object.phoneNumber2 == null
              ? null
              : fbb.writeString(object.phoneNumber2!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final observationsOffset = object.observations == null
              ? null
              : fbb.writeString(object.observations!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, cpfOffset);
          fbb.addOffset(3, addressOffset);
          fbb.addOffset(4, phoneNumber1Offset);
          fbb.addOffset(5, phoneNumber2Offset);
          fbb.addOffset(6, emailOffset);
          fbb.addOffset(7, observationsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CustomerModel(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              cpf: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              phoneNumber1: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              phoneNumber2: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              observations: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CustomerModel] entity fields to define ObjectBox queries.
class CustomerModel_ {
  /// see [CustomerModel.id]
  static final id =
      QueryIntegerProperty<CustomerModel>(_entities[0].properties[0]);

  /// see [CustomerModel.name]
  static final name =
      QueryStringProperty<CustomerModel>(_entities[0].properties[1]);

  /// see [CustomerModel.cpf]
  static final cpf =
      QueryStringProperty<CustomerModel>(_entities[0].properties[2]);

  /// see [CustomerModel.address]
  static final address =
      QueryStringProperty<CustomerModel>(_entities[0].properties[3]);

  /// see [CustomerModel.phoneNumber1]
  static final phoneNumber1 =
      QueryStringProperty<CustomerModel>(_entities[0].properties[4]);

  /// see [CustomerModel.phoneNumber2]
  static final phoneNumber2 =
      QueryStringProperty<CustomerModel>(_entities[0].properties[5]);

  /// see [CustomerModel.email]
  static final email =
      QueryStringProperty<CustomerModel>(_entities[0].properties[6]);

  /// see [CustomerModel.observations]
  static final observations =
      QueryStringProperty<CustomerModel>(_entities[0].properties[7]);
}
