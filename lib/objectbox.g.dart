// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/address_model.dart';
import 'models/customer_model.dart';
import 'models/product_model.dart';
import 'models/product_provider_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 147748851744285916),
      name: 'Address',
      lastPropertyId: const IdUid(8, 8349903112215382073),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3574803265445957371),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2345907980247639890),
            name: 'cep',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8504505047603974446),
            name: 'logradouro',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6083272483611805230),
            name: 'complemento',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5571347426577005369),
            name: 'bairro',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8822608181071875678),
            name: 'localidade',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6547904009342316115),
            name: 'uf',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8349903112215382073),
            name: 'numero',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6599012129572506194),
      name: 'Customer',
      lastPropertyId: const IdUid(7, 1653129191193306634),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6361617769381076311),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7189262802472662206),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2679484048895871447),
            name: 'cpf',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8994166054628989256),
            name: 'phoneNumber1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4955289679263165627),
            name: 'phoneNumber2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3750073309702030),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1653129191193306634),
            name: 'observations',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5630586523992855594),
      name: 'Product',
      lastPropertyId: const IdUid(11, 7664389535164658371),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2744609949234862806),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1424439168835082565),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8818664002513981931),
            name: 'cod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3451974139118546765),
            name: 'productProviderDocument',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5424656533483962226),
            name: 'costValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1630422467139705321),
            name: 'saleValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3986614796603089958),
            name: 'brand',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2930792789256341233),
            name: 'categoryName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1254975959262601771),
            name: 'unitMeasurement',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2555202453079208525),
            name: 'minQuantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7664389535164658371),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7608638318125712562),
      name: 'ProductProvider',
      lastPropertyId: const IdUid(7, 4633314652390851934),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4401856319960587123),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6870647981026284927),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4666015417776582434),
            name: 'document',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 413565716045295625),
            name: 'phoneNumber1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6755035643818151844),
            name: 'phoneNumber2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8634081405606875175),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4633314652390851934),
            name: 'observations',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 7608638318125712562),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Address: EntityDefinition<Address>(
        model: _entities[0],
        toOneRelations: (Address object) => [],
        toManyRelations: (Address object) => {},
        getId: (Address object) => object.id,
        setId: (Address object, int id) {
          object.id = id;
        },
        objectToFB: (Address object, fb.Builder fbb) {
          final cepOffset =
              object.cep == null ? null : fbb.writeString(object.cep!);
          final logradouroOffset = object.logradouro == null
              ? null
              : fbb.writeString(object.logradouro!);
          final complementoOffset = object.complemento == null
              ? null
              : fbb.writeString(object.complemento!);
          final bairroOffset =
              object.bairro == null ? null : fbb.writeString(object.bairro!);
          final localidadeOffset = object.localidade == null
              ? null
              : fbb.writeString(object.localidade!);
          final ufOffset =
              object.uf == null ? null : fbb.writeString(object.uf!);
          final numeroOffset =
              object.numero == null ? null : fbb.writeString(object.numero!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cepOffset);
          fbb.addOffset(2, logradouroOffset);
          fbb.addOffset(3, complementoOffset);
          fbb.addOffset(4, bairroOffset);
          fbb.addOffset(5, localidadeOffset);
          fbb.addOffset(6, ufOffset);
          fbb.addOffset(7, numeroOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Address(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cep: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              logradouro: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              complemento: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              bairro: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              localidade: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              uf: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              numero: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18));

          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[1],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {},
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final cpfOffset = fbb.writeString(object.cpf);
          final phoneNumber1Offset = fbb.writeString(object.phoneNumber1);
          final phoneNumber2Offset = fbb.writeString(object.phoneNumber2);
          final emailOffset = fbb.writeString(object.email);
          final observationsOffset = fbb.writeString(object.observations);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, cpfOffset);
          fbb.addOffset(3, phoneNumber1Offset);
          fbb.addOffset(4, phoneNumber2Offset);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, observationsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              cpf: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              phoneNumber1: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              phoneNumber2: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              observations: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''));

          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[2],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final codOffset = fbb.writeString(object.cod);
          final productProviderDocumentOffset =
              fbb.writeString(object.productProviderDocument);
          final brandOffset = fbb.writeString(object.brand);
          final categoryNameOffset = fbb.writeString(object.categoryName);
          final unitMeasurementOffset = fbb.writeString(object.unitMeasurement);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, codOffset);
          fbb.addOffset(3, productProviderDocumentOffset);
          fbb.addFloat64(4, object.costValue);
          fbb.addFloat64(5, object.saleValue);
          fbb.addOffset(6, brandOffset);
          fbb.addOffset(7, categoryNameOffset);
          fbb.addOffset(8, unitMeasurementOffset);
          fbb.addInt64(9, object.minQuantity);
          fbb.addOffset(10, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cod: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              productProviderDocument:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 10, ''),
              brand: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              categoryName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              unitMeasurement: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              costValue:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              saleValue:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              minQuantity: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              description: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''));

          return object;
        }),
    ProductProvider: EntityDefinition<ProductProvider>(
        model: _entities[3],
        toOneRelations: (ProductProvider object) => [],
        toManyRelations: (ProductProvider object) => {},
        getId: (ProductProvider object) => object.id,
        setId: (ProductProvider object, int id) {
          object.id = id;
        },
        objectToFB: (ProductProvider object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final documentOffset = fbb.writeString(object.document);
          final phoneNumber1Offset = fbb.writeString(object.phoneNumber1);
          final phoneNumber2Offset = fbb.writeString(object.phoneNumber2);
          final emailOffset = fbb.writeString(object.email);
          final observationsOffset = fbb.writeString(object.observations);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, documentOffset);
          fbb.addOffset(3, phoneNumber1Offset);
          fbb.addOffset(4, phoneNumber2Offset);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, observationsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductProvider(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              document: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              phoneNumber1: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              phoneNumber2: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              observations: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Address] entity fields to define ObjectBox queries.
class Address_ {
  /// see [Address.id]
  static final id = QueryIntegerProperty<Address>(_entities[0].properties[0]);

  /// see [Address.cep]
  static final cep = QueryStringProperty<Address>(_entities[0].properties[1]);

  /// see [Address.logradouro]
  static final logradouro =
      QueryStringProperty<Address>(_entities[0].properties[2]);

  /// see [Address.complemento]
  static final complemento =
      QueryStringProperty<Address>(_entities[0].properties[3]);

  /// see [Address.bairro]
  static final bairro =
      QueryStringProperty<Address>(_entities[0].properties[4]);

  /// see [Address.localidade]
  static final localidade =
      QueryStringProperty<Address>(_entities[0].properties[5]);

  /// see [Address.uf]
  static final uf = QueryStringProperty<Address>(_entities[0].properties[6]);

  /// see [Address.numero]
  static final numero =
      QueryStringProperty<Address>(_entities[0].properties[7]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[1].properties[0]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[1].properties[1]);

  /// see [Customer.cpf]
  static final cpf = QueryStringProperty<Customer>(_entities[1].properties[2]);

  /// see [Customer.phoneNumber1]
  static final phoneNumber1 =
      QueryStringProperty<Customer>(_entities[1].properties[3]);

  /// see [Customer.phoneNumber2]
  static final phoneNumber2 =
      QueryStringProperty<Customer>(_entities[1].properties[4]);

  /// see [Customer.email]
  static final email =
      QueryStringProperty<Customer>(_entities[1].properties[5]);

  /// see [Customer.observations]
  static final observations =
      QueryStringProperty<Customer>(_entities[1].properties[6]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id = QueryIntegerProperty<Product>(_entities[2].properties[0]);

  /// see [Product.name]
  static final name = QueryStringProperty<Product>(_entities[2].properties[1]);

  /// see [Product.cod]
  static final cod = QueryStringProperty<Product>(_entities[2].properties[2]);

  /// see [Product.productProviderDocument]
  static final productProviderDocument =
      QueryStringProperty<Product>(_entities[2].properties[3]);

  /// see [Product.costValue]
  static final costValue =
      QueryDoubleProperty<Product>(_entities[2].properties[4]);

  /// see [Product.saleValue]
  static final saleValue =
      QueryDoubleProperty<Product>(_entities[2].properties[5]);

  /// see [Product.brand]
  static final brand = QueryStringProperty<Product>(_entities[2].properties[6]);

  /// see [Product.categoryName]
  static final categoryName =
      QueryStringProperty<Product>(_entities[2].properties[7]);

  /// see [Product.unitMeasurement]
  static final unitMeasurement =
      QueryStringProperty<Product>(_entities[2].properties[8]);

  /// see [Product.minQuantity]
  static final minQuantity =
      QueryIntegerProperty<Product>(_entities[2].properties[9]);

  /// see [Product.description]
  static final description =
      QueryStringProperty<Product>(_entities[2].properties[10]);
}

/// [ProductProvider] entity fields to define ObjectBox queries.
class ProductProvider_ {
  /// see [ProductProvider.id]
  static final id =
      QueryIntegerProperty<ProductProvider>(_entities[3].properties[0]);

  /// see [ProductProvider.name]
  static final name =
      QueryStringProperty<ProductProvider>(_entities[3].properties[1]);

  /// see [ProductProvider.document]
  static final document =
      QueryStringProperty<ProductProvider>(_entities[3].properties[2]);

  /// see [ProductProvider.phoneNumber1]
  static final phoneNumber1 =
      QueryStringProperty<ProductProvider>(_entities[3].properties[3]);

  /// see [ProductProvider.phoneNumber2]
  static final phoneNumber2 =
      QueryStringProperty<ProductProvider>(_entities[3].properties[4]);

  /// see [ProductProvider.email]
  static final email =
      QueryStringProperty<ProductProvider>(_entities[3].properties[5]);

  /// see [ProductProvider.observations]
  static final observations =
      QueryStringProperty<ProductProvider>(_entities[3].properties[6]);
}
